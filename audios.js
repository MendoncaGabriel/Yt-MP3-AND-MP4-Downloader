const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");
const ytDlp = path.resolve("yt-dlp.exe"); // Caminho correto para o yt-dlp.exe
const ffmpegPath = require("ffmpeg-static");

// Fun√ß√£o para limpar o nome do arquivo
function limparNomeArquivo(nome) {
    return nome.replace(/[^a-zA-Z0-9-_.\s]/g, ''); // Remove caracteres especiais
}

// Fun√ß√£o para baixar o MP3 de um v√≠deo
async function baixarEMp3(url, tentativa = 1) {
    if (!url) {
        console.log("‚ùå URL inv√°lida.");
        return false;
    }

    const pastaDownloads = path.resolve("downloads")
    if (!fs.existsSync(pastaDownloads)) {
        fs.mkdirSync(pastaDownloads);
    }

    console.log(`üéµ Baixando m√∫sica...`);

    // Obter o t√≠tulo do v√≠deo usando yt-dlp
    const obterTituloComando = `"${ytDlp}" -e "${url}"`;

    let titulo;
    try {
        titulo = await new Promise((resolve, reject) => {
            exec(obterTituloComando, (erro, stdout, stderr) => {
                if (erro) {
                    console.error(`‚ùå Erro ao obter t√≠tulo do v√≠deo: ${url}\n${stderr}`);
                    reject(stderr);
                    return;
                }
                resolve(stdout.trim());
            });
        });
    } catch (erro) {
        console.log("‚ùå N√£o foi poss√≠vel obter o t√≠tulo do v√≠deo.");
        return false;
    }

    if (!titulo) {
        console.log("‚ùå N√£o foi poss√≠vel obter o t√≠tulo do v√≠deo.");
        return false;
    }

    const tituloLimpo = limparNomeArquivo(titulo);
    const nomeArquivo = `${tituloLimpo}.mp3`;

    const comando = `"${ytDlp}" -x --audio-format mp3 --audio-quality 128K --ffmpeg-location "${ffmpegPath}" -o "${pastaDownloads}/${nomeArquivo}" "${url}"`;

    try {
        await new Promise((resolve, reject) => {
            const processo = exec(comando);

            processo.stdout.on("data", (data) => {
                const dados = data.toString();
                if (dados.includes("ETA") || dados.includes("downloading")) {
                    console.log(dados);
                }
            });

            processo.stderr.on("data", (data) => {
                console.error(`‚ùå Erro ao baixar o v√≠deo\n${data.toString()}`);
                reject(data.toString());
            });

            processo.on("close", (code) => {
                if (code === 0) {
                    console.log(`‚úÖ M√∫sica conclu√≠da e salva como: ${nomeArquivo}`);
                    resolve(true);
                } else {
                    console.log(`‚ùå Falha ao baixar a m√∫sica`);
                    reject();
                }
            });
        });
        return true;
    } catch (erro) {
        if (tentativa < 3) {
            console.log(`‚ö†Ô∏è Tentativa ${tentativa} falhou. Tentando novamente...`);
            return baixarEMp3(url, tentativa + 1);
        }
        return false;
    }
}

// Fun√ß√£o para ler os links do arquivo lista.txt e baixar em sequ√™ncia
async function baixarMusicasEmSequencia() {
    const caminhoLista = path.resolve("lista.txt");

    if (!fs.existsSync(caminhoLista)) {
        console.log("‚ùå O arquivo lista.txt n√£o foi encontrado.");
        return;
    }

    const conteudo = fs.readFileSync(caminhoLista, "utf-8");
    const urls = conteudo.split("\n").map((url) => url.trim()).filter(Boolean);

    if (urls.length === 0) {
        console.log("‚ùå Nenhuma URL encontrada no arquivo lista.txt.");
        return;
    }

    console.log(`üéµ Total de ${urls.length} m√∫sicas para baixar...`);

    const urlsVisitadas = new Set();
    const urlsComErro = [];
    const urlsDuplicadas = [];
    const urlsProcessadas = [];

    // Baixar m√∫sicas em paralelo (m√°ximo de 3 downloads simult√¢neos)
    const promises = [];

    for (let i = 0; i < urls.length; i++) {
        const url = urls[i];

        // Verificar se a URL j√° foi visitada
        if (urlsVisitadas.has(url)) {
            urlsDuplicadas.push(url);
            continue;
        }

        urlsVisitadas.add(url);

        const promise = baixarEMp3(url).then((resultado) => {
            if (resultado) {
                urlsProcessadas.push(url);
            } else {
                urlsComErro.push(url);
            }
        }).catch(() => {
            urlsComErro.push(url);
        });

        promises.push(promise);

        // Limitar o n√∫mero de downloads simult√¢neos (m√°ximo de 3 por vez)
        if (promises.length >= 3 || i === urls.length - 1) {
            await Promise.all(promises);
            promises.length = 0; // Resetar a lista de promessas para a pr√≥xima rodada
        }
    }

    // Tentar baixar novamente as URLs que falharam
    for (const url of urlsComErro) {
        await baixarEMp3(url);
    }

    // Gerar log final
    console.log(`\nüîπ Total de m√∫sicas baixadas com sucesso: ${urlsProcessadas.length}`);
    console.log(`üî∏ URLs com falha no download:`);
    console.log(urlsComErro.length ? urlsComErro.join("\n") : "Nenhuma falha.");

    console.log(`\nüî∏ URLs duplicadas:`);
    console.log(urlsDuplicadas.length ? urlsDuplicadas.join("\n") : "Nenhuma duplicada.");

    console.log(`\n‚úÖ Todos os downloads foram conclu√≠dos!`);
}

// Chamar a fun√ß√£o para baixar as m√∫sicas
baixarMusicasEmSequencia();
